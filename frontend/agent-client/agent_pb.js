// source: agent.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.agent.ActionAssessment', null, global);
goog.exportSymbol('proto.agent.OperatingPicture', null, global);
goog.exportSymbol('proto.agent.PlanAssessment', null, global);
goog.exportSymbol('proto.agent.TargetIdToDamageEntry', null, global);
goog.exportSymbol('proto.agent.TargetToDamageMap', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agent.OperatingPicture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.agent.OperatingPicture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.agent.OperatingPicture.displayName = 'proto.agent.OperatingPicture';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agent.TargetIdToDamageEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.agent.TargetIdToDamageEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.agent.TargetIdToDamageEntry.displayName = 'proto.agent.TargetIdToDamageEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agent.TargetToDamageMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.agent.TargetToDamageMap.repeatedFields_, null);
};
goog.inherits(proto.agent.TargetToDamageMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.agent.TargetToDamageMap.displayName = 'proto.agent.TargetToDamageMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agent.PlanAssessment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.agent.PlanAssessment.repeatedFields_, null);
};
goog.inherits(proto.agent.PlanAssessment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.agent.PlanAssessment.displayName = 'proto.agent.PlanAssessment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.agent.ActionAssessment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.agent.ActionAssessment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.agent.ActionAssessment.displayName = 'proto.agent.ActionAssessment';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agent.OperatingPicture.prototype.toObject = function(opt_includeInstance) {
  return proto.agent.OperatingPicture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agent.OperatingPicture} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.OperatingPicture.toObject = function(includeInstance, msg) {
  var f, obj = {
    nummissiles: jspb.Message.getFieldWithDefault(msg, 1, 0),
    targetidtodamage: (f = msg.getTargetidtodamage()) && proto.agent.TargetToDamageMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agent.OperatingPicture}
 */
proto.agent.OperatingPicture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agent.OperatingPicture;
  return proto.agent.OperatingPicture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agent.OperatingPicture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agent.OperatingPicture}
 */
proto.agent.OperatingPicture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNummissiles(value);
      break;
    case 2:
      var value = new proto.agent.TargetToDamageMap;
      reader.readMessage(value,proto.agent.TargetToDamageMap.deserializeBinaryFromReader);
      msg.setTargetidtodamage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agent.OperatingPicture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agent.OperatingPicture.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agent.OperatingPicture} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.OperatingPicture.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNummissiles();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTargetidtodamage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.agent.TargetToDamageMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 numMissiles = 1;
 * @return {number}
 */
proto.agent.OperatingPicture.prototype.getNummissiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.agent.OperatingPicture} returns this
 */
proto.agent.OperatingPicture.prototype.setNummissiles = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional TargetToDamageMap targetIdToDamage = 2;
 * @return {?proto.agent.TargetToDamageMap}
 */
proto.agent.OperatingPicture.prototype.getTargetidtodamage = function() {
  return /** @type{?proto.agent.TargetToDamageMap} */ (
    jspb.Message.getWrapperField(this, proto.agent.TargetToDamageMap, 2));
};


/**
 * @param {?proto.agent.TargetToDamageMap|undefined} value
 * @return {!proto.agent.OperatingPicture} returns this
*/
proto.agent.OperatingPicture.prototype.setTargetidtodamage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.agent.OperatingPicture} returns this
 */
proto.agent.OperatingPicture.prototype.clearTargetidtodamage = function() {
  return this.setTargetidtodamage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.agent.OperatingPicture.prototype.hasTargetidtodamage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agent.TargetIdToDamageEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.agent.TargetIdToDamageEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agent.TargetIdToDamageEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.TargetIdToDamageEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    damage: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agent.TargetIdToDamageEntry}
 */
proto.agent.TargetIdToDamageEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agent.TargetIdToDamageEntry;
  return proto.agent.TargetIdToDamageEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agent.TargetIdToDamageEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agent.TargetIdToDamageEntry}
 */
proto.agent.TargetIdToDamageEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDamage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agent.TargetIdToDamageEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agent.TargetIdToDamageEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agent.TargetIdToDamageEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.TargetIdToDamageEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDamage();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.agent.TargetIdToDamageEntry.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.agent.TargetIdToDamageEntry} returns this
 */
proto.agent.TargetIdToDamageEntry.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 damage = 2;
 * @return {number}
 */
proto.agent.TargetIdToDamageEntry.prototype.getDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.agent.TargetIdToDamageEntry} returns this
 */
proto.agent.TargetIdToDamageEntry.prototype.setDamage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.agent.TargetToDamageMap.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agent.TargetToDamageMap.prototype.toObject = function(opt_includeInstance) {
  return proto.agent.TargetToDamageMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agent.TargetToDamageMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.TargetToDamageMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.agent.TargetIdToDamageEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agent.TargetToDamageMap}
 */
proto.agent.TargetToDamageMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agent.TargetToDamageMap;
  return proto.agent.TargetToDamageMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agent.TargetToDamageMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agent.TargetToDamageMap}
 */
proto.agent.TargetToDamageMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.agent.TargetIdToDamageEntry;
      reader.readMessage(value,proto.agent.TargetIdToDamageEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agent.TargetToDamageMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agent.TargetToDamageMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agent.TargetToDamageMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.TargetToDamageMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.agent.TargetIdToDamageEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TargetIdToDamageEntry entries = 1;
 * @return {!Array<!proto.agent.TargetIdToDamageEntry>}
 */
proto.agent.TargetToDamageMap.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.agent.TargetIdToDamageEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.agent.TargetIdToDamageEntry, 1));
};


/**
 * @param {!Array<!proto.agent.TargetIdToDamageEntry>} value
 * @return {!proto.agent.TargetToDamageMap} returns this
*/
proto.agent.TargetToDamageMap.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.agent.TargetIdToDamageEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.agent.TargetIdToDamageEntry}
 */
proto.agent.TargetToDamageMap.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.agent.TargetIdToDamageEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.agent.TargetToDamageMap} returns this
 */
proto.agent.TargetToDamageMap.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.agent.PlanAssessment.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agent.PlanAssessment.prototype.toObject = function(opt_includeInstance) {
  return proto.agent.PlanAssessment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agent.PlanAssessment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.PlanAssessment.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionassessmentsList: jspb.Message.toObjectList(msg.getActionassessmentsList(),
    proto.agent.ActionAssessment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agent.PlanAssessment}
 */
proto.agent.PlanAssessment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agent.PlanAssessment;
  return proto.agent.PlanAssessment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agent.PlanAssessment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agent.PlanAssessment}
 */
proto.agent.PlanAssessment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.agent.ActionAssessment;
      reader.readMessage(value,proto.agent.ActionAssessment.deserializeBinaryFromReader);
      msg.addActionassessments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agent.PlanAssessment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agent.PlanAssessment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agent.PlanAssessment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.PlanAssessment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionassessmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.agent.ActionAssessment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ActionAssessment actionAssessments = 1;
 * @return {!Array<!proto.agent.ActionAssessment>}
 */
proto.agent.PlanAssessment.prototype.getActionassessmentsList = function() {
  return /** @type{!Array<!proto.agent.ActionAssessment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.agent.ActionAssessment, 1));
};


/**
 * @param {!Array<!proto.agent.ActionAssessment>} value
 * @return {!proto.agent.PlanAssessment} returns this
*/
proto.agent.PlanAssessment.prototype.setActionassessmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.agent.ActionAssessment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.agent.ActionAssessment}
 */
proto.agent.PlanAssessment.prototype.addActionassessments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.agent.ActionAssessment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.agent.PlanAssessment} returns this
 */
proto.agent.PlanAssessment.prototype.clearActionassessmentsList = function() {
  return this.setActionassessmentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.agent.ActionAssessment.prototype.toObject = function(opt_includeInstance) {
  return proto.agent.ActionAssessment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.agent.ActionAssessment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.ActionAssessment.toObject = function(includeInstance, msg) {
  var f, obj = {
    actiontargetid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nummissilesleft: jspb.Message.getFieldWithDefault(msg, 2, 0),
    targetidtocurrentdamage: (f = msg.getTargetidtocurrentdamage()) && proto.agent.TargetToDamageMap.toObject(includeInstance, f),
    targetidtodesireddamage: (f = msg.getTargetidtodesireddamage()) && proto.agent.TargetToDamageMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.agent.ActionAssessment}
 */
proto.agent.ActionAssessment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.agent.ActionAssessment;
  return proto.agent.ActionAssessment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.agent.ActionAssessment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.agent.ActionAssessment}
 */
proto.agent.ActionAssessment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActiontargetid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNummissilesleft(value);
      break;
    case 3:
      var value = new proto.agent.TargetToDamageMap;
      reader.readMessage(value,proto.agent.TargetToDamageMap.deserializeBinaryFromReader);
      msg.setTargetidtocurrentdamage(value);
      break;
    case 4:
      var value = new proto.agent.TargetToDamageMap;
      reader.readMessage(value,proto.agent.TargetToDamageMap.deserializeBinaryFromReader);
      msg.setTargetidtodesireddamage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.agent.ActionAssessment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.agent.ActionAssessment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.agent.ActionAssessment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.agent.ActionAssessment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActiontargetid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNummissilesleft();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTargetidtocurrentdamage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.agent.TargetToDamageMap.serializeBinaryToWriter
    );
  }
  f = message.getTargetidtodesireddamage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.agent.TargetToDamageMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional string actionTargetId = 1;
 * @return {string}
 */
proto.agent.ActionAssessment.prototype.getActiontargetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.agent.ActionAssessment} returns this
 */
proto.agent.ActionAssessment.prototype.setActiontargetid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 numMissilesLeft = 2;
 * @return {number}
 */
proto.agent.ActionAssessment.prototype.getNummissilesleft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.agent.ActionAssessment} returns this
 */
proto.agent.ActionAssessment.prototype.setNummissilesleft = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TargetToDamageMap targetIdToCurrentDamage = 3;
 * @return {?proto.agent.TargetToDamageMap}
 */
proto.agent.ActionAssessment.prototype.getTargetidtocurrentdamage = function() {
  return /** @type{?proto.agent.TargetToDamageMap} */ (
    jspb.Message.getWrapperField(this, proto.agent.TargetToDamageMap, 3));
};


/**
 * @param {?proto.agent.TargetToDamageMap|undefined} value
 * @return {!proto.agent.ActionAssessment} returns this
*/
proto.agent.ActionAssessment.prototype.setTargetidtocurrentdamage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.agent.ActionAssessment} returns this
 */
proto.agent.ActionAssessment.prototype.clearTargetidtocurrentdamage = function() {
  return this.setTargetidtocurrentdamage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.agent.ActionAssessment.prototype.hasTargetidtocurrentdamage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TargetToDamageMap targetIdToDesiredDamage = 4;
 * @return {?proto.agent.TargetToDamageMap}
 */
proto.agent.ActionAssessment.prototype.getTargetidtodesireddamage = function() {
  return /** @type{?proto.agent.TargetToDamageMap} */ (
    jspb.Message.getWrapperField(this, proto.agent.TargetToDamageMap, 4));
};


/**
 * @param {?proto.agent.TargetToDamageMap|undefined} value
 * @return {!proto.agent.ActionAssessment} returns this
*/
proto.agent.ActionAssessment.prototype.setTargetidtodesireddamage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.agent.ActionAssessment} returns this
 */
proto.agent.ActionAssessment.prototype.clearTargetidtodesireddamage = function() {
  return this.setTargetidtodesireddamage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.agent.ActionAssessment.prototype.hasTargetidtodesireddamage = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.agent);
